BITACORA DE DESARROLLO CON REACT:

1.- Cada componente de react tiene propiedades que pueden ser consultadas desde la
consola solo coloca: console.log( props ); en el metodo render.

	muestra las propiedadades de la clase
	
	console.log( this.props );
	console.log( this.props.history ); historial
	console.log( this.props.location ); locaciones html
	console.log( this.props.match ); match components

INPUT:

2.- Se pueden a침adir nuevas propiedades de entrada al componente solo asegurate,
de establecer las propiedades en las llamadas al elemento

	<Persona name="Gabriel" />

NOTA: React es bantante flexible pero solo tiene una sola regla estricta.

	"Todos los componentes de React deben actuar como funciones puras con respecto a sus props".

3.- NO USAR array.forEach(): en listas de valores que se deben recorrer porque retorna
	undefined en este caso utiliza el array.map() 

	names.map( ( name, index ) => <Persona key={ index } name={ name } /> )

4.- Ruta not found:

	<Route path="**" component={ NotFound } />

5.- Cada componente de react controla su estado, se pueden manipular las propiedades
del componente para controlar eventos dentro del constructor utilizando la propiedad
state de la clase.

	this.state = { value: '' };

6.- Para manejar eventos es un poco diferente con JSX pasar el nombre de la funcion
en vez de un string. Las funciones handle reciben un parametro que corresponde al
evento. No se necesita utilizar eventListener para las funciones.

7.- El metodo bind permite enlaza la funcion de la clase con el evento, y no se
se ejecuta de inmediato. Devuelve una copia del archivo.

	// previene que siga ejecutando el metodo en JavaScript
	event.preventDefault(); -> return false

8.- Hay un par de cosas sobre el set state :

	8.1.- No modifiques el estado directamente, solo aplica en el constructor de 
	la clase en su lugar utiliza setState.

	8.2.- Las actualizaciones de estado son asincronas, es decir react agrupa varias
	invocaciones a set state, no debes confiar en sus valores para calcular su
	siguiente estado.

	Para arreglarlo, se usa la segunda forma de setState que acepta una funcion 
	en lugar de un objeto. Esta funcion recibir치 el estado previo como primer 
	argumento y las props como el segundo argumento

	// Correcto
		this.setState((state, props) => ({
  			counter: state.counter + props.increment
		}));

9.- Cuando hagas una redireccion existen 2 formas:

	1.- A traves de componentes controlados: busca la actualizacion de
	estados es una buena practica al momento de realizar una redirecci칩n

	2.- Sino tambien puedes modificar el history de la clase para obligar 
	al componente a redireccionar cuando sea necesario. 

10.- Parece que el router dom conserva los estilos generados por la pagina
hay que reiniciar los estilos cada vez que la aplicacion aplique una redirecci칩n.


11.- la metodo bind vincula la funcion dentro de la clase para que pueda manipular
el estado del componente. Sino lo colocas react te muestra que setState es undefined.

| ---------------------------------------------------------------------------------- |

Aplicacion: audiophone-core
Nucleo: React.js